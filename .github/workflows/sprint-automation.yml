name: Sprint Automation

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      sprint:
        description: 'Sprint number to report on'
        required: false
        default: 'current'

jobs:
  sprint-report:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate Sprint Report
        uses: actions/github-script@v7
        with:
          script: |
            // Find current sprint milestone
            const milestones = await github.rest.issues.listMilestones({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'due_on',
              direction: 'asc'
            });
            
            if (milestones.data.length === 0) {
              console.log('No open milestones found');
              return;
            }
            
            const currentSprint = milestones.data[0];
            console.log(`Reporting on: ${currentSprint.title}`);
            
            // Get all issues in current sprint
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              milestone: currentSprint.number,
              state: 'all',
              per_page: 100
            });
            
            // Calculate metrics
            const metrics = {
              total: issues.data.length,
              open: issues.data.filter(i => i.state === 'open').length,
              closed: issues.data.filter(i => i.state === 'closed').length,
              blocked: issues.data.filter(i => i.labels.some(l => l.name === 'blocked')).length,
              inProgress: issues.data.filter(i => i.labels.some(l => l.name === 'in-progress')).length,
              totalPoints: 0,
              completedPoints: 0
            };
            
            // Calculate story points
            issues.data.forEach(issue => {
              const pointLabel = issue.labels.find(l => l.name.startsWith('points:'));
              if (pointLabel) {
                const points = parseInt(pointLabel.name.split(' ')[1]);
                metrics.totalPoints += points;
                if (issue.state === 'closed') {
                  metrics.completedPoints += points;
                }
              }
            });
            
            // Create burndown data
            const burndownData = [];
            const sprintStart = new Date(currentSprint.created_at);
            const sprintEnd = new Date(currentSprint.due_on);
            const today = new Date();
            
            // Group by layer
            const layerBreakdown = {};
            issues.data.forEach(issue => {
              const layerLabel = issue.labels.find(l => l.name.startsWith('layer:'));
              if (layerLabel) {
                const layer = layerLabel.name.replace('layer: ', '');
                if (!layerBreakdown[layer]) {
                  layerBreakdown[layer] = { total: 0, completed: 0 };
                }
                layerBreakdown[layer].total++;
                if (issue.state === 'closed') {
                  layerBreakdown[layer].completed++;
                }
              }
            });
            
            // Generate report body
            const reportBody = `# Sprint Report: ${currentSprint.title}
            
## 📊 Sprint Metrics
            
| Metric | Value |
|--------|-------|
| **Total Stories** | ${metrics.total} |
| **Completed** | ${metrics.closed} |
| **In Progress** | ${metrics.inProgress} |
| **Blocked** | ${metrics.blocked} |
| **Remaining** | ${metrics.open} |
| **Story Points** | ${metrics.completedPoints}/${metrics.totalPoints} |
| **Velocity** | ${metrics.totalPoints > 0 ? Math.round(metrics.completedPoints/metrics.totalPoints*100) : 0}% |
            
## 📈 Progress by Layer
            
| Layer | Progress | Status |
|-------|----------|--------|
${Object.entries(layerBreakdown).map(([layer, data]) => 
  `| **${layer}** | ${data.completed}/${data.total} | ${data.completed === data.total ? '✅' : data.completed > 0 ? '🟡' : '⭕'} |`
).join('\n')}
            
## 🚫 Blocked Issues
            
${issues.data
  .filter(i => i.labels.some(l => l.name === 'blocked'))
  .map(i => `- #${i.number} - ${i.title}`)
  .join('\n') || 'No blocked issues 🎉'}
            
## 📝 Recent Activity (Last 7 days)
            
### Completed
${issues.data
  .filter(i => i.state === 'closed' && new Date(i.closed_at) > new Date(Date.now() - 7*24*60*60*1000))
  .map(i => `- #${i.number} - ${i.title}`)
  .join('\n') || 'No issues completed in last 7 days'}
            
### Started
${issues.data
  .filter(i => i.created_at && new Date(i.created_at) > new Date(Date.now() - 7*24*60*60*1000))
  .map(i => `- #${i.number} - ${i.title}`)
  .join('\n') || 'No new issues in last 7 days'}
            
## 📅 Sprint Timeline
            
- **Start Date**: ${sprintStart.toLocaleDateString()}
- **End Date**: ${sprintEnd.toLocaleDateString()}
- **Days Remaining**: ${Math.ceil((sprintEnd - today) / (1000 * 60 * 60 * 24))}
- **Sprint Progress**: ${Math.round((today - sprintStart) / (sprintEnd - sprintStart) * 100)}%
            
## 🎯 Next Steps
            
1. Review blocked issues and unblock them
2. Focus on completing in-progress stories
3. Ensure all stories have clear acceptance criteria
4. Update story point estimates if needed
            
---
*Generated on ${new Date().toLocaleDateString()} by Sprint Automation*`;
            
            // Create the report issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[REPORT] ${currentSprint.title} - Week ${Math.ceil((today - sprintStart) / (7 * 24 * 60 * 60 * 1000))}`,
              body: reportBody,
              labels: ['documentation', 'sprint-report'],
              milestone: currentSprint.number
            });
            
            console.log('Sprint report created successfully');

  update-story-points:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    
    # Run when issues are labeled
    if: github.event_name == 'issues' && github.event.action == 'labeled'
    
    steps:
      - name: Update Project Fields
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const label = context.payload.label;
            
            // Check if it's a points label
            if (label.name.startsWith('points:')) {
              console.log(`Updating story points for issue #${issue.number}`);
              
              // Add comment to issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `📊 Story points updated: **${label.name.replace('points: ', '')} points**`
              });
            }